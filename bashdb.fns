#!/bin/bash


#Debugger Script#


## After each line of the test script is executed the shell traps to this function.

function _steptrap
{
    _curline=$1         # the number of the line that just ran

    (( $_trace )) && _msg "PS4 line $_curline: ${_lines[$_curline]}"

    if (( $_steps >= 0 )); then
        let _steps="$_steps - 1"
    fi


    # First check to see if a line number breakpoint was reached. If it was, then enter debugger.

    if _at_linenumbp ; then
        _msg "Reached breakpoint at line $_curline"
        _cmdloop

        # It wasn't, so check whether a break condition exists and is true. If it is, enter debugger.
    elif [ -n "$_brcond" ] && eval $_brcond; then
        _msg "Break condition $_brcond true at line $_curline"
        _cmdloop
    fi
}


## The Debugger Command Loop

function _cmdloop{
    local cmd args

    while read -e -p "bashdb> " cmd args; do
        case $cmd in 
            \? | h ) _menu ;;       #print command menu
            bc ) _setbc $args ;;    #set a break condition
            bp ) _setbp $args ;;    #set a breakpoint at the given line
            cb ) _clearby $args ;;  #clear one or all breakpoints
            ds ) _displayscript ;;  #list the script and show breakpoints
            g  ) return ;;          #"go": start/resume execution of script
            q  ) exit ;;            #quit 
            s  ) let _steps=${args:-1} #single step N times (default=1)
                return ;;
            x  ) _xtrace ;;         #toggle execution trace
        * ) eval ${cmd#!} $args ;;  #pass to shell
            *  ) _msg "Invalid command: '$cmd'" ;;
       esac
    done
}

## See if line number has breakpoint

function _at_linenumbp
{
    local i=0
    
    #Loop through the breakpoints array check if any match current number. If so return true(0), otherwise false.
    
    if [ "$_linebp" ]; then
        while (( $i < ${#_linebp[@]} )); do
            if (( ${_linebp[$i]} == $_curline )); then
                return 0
            fi
            let i=$i+1
        done
    fi
    return 1
}

## List breakpoints and conditions

function _listbp
{
    if [ -n "$_linebp" ]; then
        _msg "Breakpoints at lines: ${_linebp[*]}"
    else
        _msg "No breakpoints have been set"
    fi
    _msg "Break on condition:"
    _msg "$_brcond"
}

## Clear individual or all breakpoints

function _clearbp
{
    local i bps

    if [ -z "$1" ]; then
        unset _linebp[*]
        _msg "All breakpoints have been cleared"
    elif [ $(echo $1 |grep '^[0-9]*') ]; then
        bps=($(echo $(for i in ${_linebp[*]}; do
            if (( $1 != $i )); then echo $i; fi; done) ))
        unset _linebp[*]
        _linebp=(${bps[*]})
        _msg "Breakpoint cleared at line $1"
    else
        _msg "Please specify a numeric line number"
    fi
}

## Set or clear a break condition

function _setbc
{
    if [ -n "$*" ]; then
        _brcond=$args
        _msg "Break when true: $_brcond"
    else
        _brcond=
        _msg "Break condition cleared"
    fi
}

## Print out shell script & mark bp loctions

function _displayscript
{

    local i=1 j=0 bp cl

    ( while (( $i < ${#_lines[@]} )); do
        if [ ${_linebp[$j]} ] && (( ${_linebp[$j]} == $i )); then
            bp='*'
            let j=$j+1
        else
            bp=' '
        fi
        if (( $_curline == $i )); then
            cl=">"
        else
            cl=" "
        fi
        echo "$i:$bp $cl ${_line[$i]}"
        let i=$i+1
     done
    ) | more
}

## Toggle execution trace on/off

function _xtrace
{
    let _trace="! $_trace"
    _msg "Execution trace "
    if (( $_trace )); then
        _msg "on"
    else
        _msg "off"
    fi
}

## Print passed args to stderr
